using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Capgemini.GreatOutdoor.BusinessLayer;
using Capgemini.GreatOutdoor.Entities;
using Capgemini.GreatOutdoor.Helpers;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Capgemini.GreatOutdoor.UnitTests

{
    //Developed By Abhishek Pratap
    


    [TestClass]
    public class AddOfflineReturnBLTest
    {
        /// <summary>
        /// Add OfflineReturn to the Collection if it is valid.
        /// </summary>
        [TestMethod]
        public async Task AddValidOfflineReturn()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() { QuantityOfReturn = 5, Purpose = 0 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn OfflineOrderID can't be Zero
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnOrderNumberCanNotBeZero()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = 0 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn Product Number can't be Zero
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnProductNumberCanNotBeZero()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = 0 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn QuantityOfReturn can't be Zero
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnQuantityOfReturnCanNotBeZero()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() {  QuantityOfReturn = 0, Purpose = 0 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn Purpose can't be null
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnPurposeCanNotBeNull()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = PurposeOfReturn.DefectiveProduct };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn Purpose can't be null
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnPurposeCanNotBeNull1()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() { QuantityOfReturn = 5, Purpose = PurposeOfReturn.UnsatiSfactoryProduct };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn Purpose can't be null
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnPurposeCanNotBeNull2()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() { QuantityOfReturn = 5, Purpose = PurposeOfReturn.WrongProductOrdered };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn Purpose can't be null
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnPurposeCanNotBeNull3()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = PurposeOfReturn.WrongProductShipped };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isAdded, errorMessage);
            }
        }



    }




    [TestClass]
    public class UpdateOfflineReturnBLTest
    {
        /// <summary>
        /// Update OfflineReturn to the Collection if it is valid.
        /// </summary>
        [TestMethod]
        public async Task UpdateValidOfflineReturn()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn1 = new OfflineReturn() { QuantityOfReturn = 5, Purpose = PurposeOfReturn.DefectiveProduct };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn1);
            OfflineReturn offlineReturn2 = new OfflineReturn() { OfflineReturnID = offlineReturn1.OfflineReturnID,  QuantityOfReturn = 15, Purpose = PurposeOfReturn.DefectiveProduct };

            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await offlineReturnBL.UpdateOfflineReturnBL(offlineReturn2);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn OfflineOrderID can't be Zero
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnOrderNumberCanNotBeZero()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn1 = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = 0 };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn1);
            OfflineReturn offlineReturn2 = new OfflineReturn() { OfflineReturnID = offlineReturn1.OfflineReturnID, QuantityOfReturn = 5, Purpose = 0 };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await offlineReturnBL.UpdateOfflineReturnBL(offlineReturn2);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn ProductID can't be Zero
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnProductNumberCanNotBeZero()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn1 = new OfflineReturn() { QuantityOfReturn = 5, Purpose = 0 };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn1);
            OfflineReturn offlineReturn2 = new OfflineReturn() { OfflineReturnID = offlineReturn1.OfflineReturnID, QuantityOfReturn = 5, Purpose = 0 };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await offlineReturnBL.UpdateOfflineReturnBL(offlineReturn2);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }





        /// <summary>
        /// OfflineReturn QuantityOfReturn can't be Zero
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnQuantityOfReturnCanNotBeZero()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn1 = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = 0 };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn1);
            OfflineReturn offlineReturn2 = new OfflineReturn() { OfflineReturnID = offlineReturn1.OfflineReturnID,  QuantityOfReturn = 0, Purpose = 0 };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await offlineReturnBL.UpdateOfflineReturnBL(offlineReturn2);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn Purpose can't be null
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnPurposeCanNotBeNull()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn1 = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = 0 };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn1);
            OfflineReturn offlineReturn2 = new OfflineReturn() { OfflineReturnID = offlineReturn1.OfflineReturnID,  QuantityOfReturn = 5, Purpose = PurposeOfReturn.UnsatiSfactoryProduct };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await offlineReturnBL.UpdateOfflineReturnBL(offlineReturn2);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn Purpose can't be null
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnPurposeCanNotBeNull1()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn1 = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = PurposeOfReturn.DefectiveProduct };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn1);
            OfflineReturn offlineReturn2 = new OfflineReturn() { OfflineReturnID = offlineReturn1.OfflineReturnID, QuantityOfReturn = 5, Purpose = PurposeOfReturn.UnsatiSfactoryProduct }; bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await offlineReturnBL.UpdateOfflineReturnBL(offlineReturn2);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }



        /// <summary>
        /// OfflineReturn Purpose can't be null
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnPurposeCanNotBeNull2()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn1 = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = PurposeOfReturn.DefectiveProduct };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn1);
            OfflineReturn offlineReturn2 = new OfflineReturn() { OfflineReturnID = offlineReturn1.OfflineReturnID,  QuantityOfReturn = 5, Purpose = PurposeOfReturn.WrongProductOrdered };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await offlineReturnBL.UpdateOfflineReturnBL(offlineReturn2);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturn Purpose can't be null
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnPurposeCanNotBeNull3()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn1 = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = PurposeOfReturn.DefectiveProduct };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn1);
            OfflineReturn offlineReturn2 = new OfflineReturn() { OfflineReturnID = offlineReturn1.OfflineReturnID, QuantityOfReturn = 5, Purpose = PurposeOfReturn.WrongProductShipped };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await offlineReturnBL.UpdateOfflineReturnBL(offlineReturn2);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }


        /// <summary>
        /// OfflineReturnID should Exist
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnIDDoesNotExist()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn1 = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = 0 };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn1);
            OfflineReturn offlineReturn2 = new OfflineReturn() { OfflineReturnID = default(Guid), QuantityOfReturn = 5, Purpose = 0 };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await offlineReturnBL.UpdateOfflineReturnBL(offlineReturn2);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }


    }

    [TestClass]
    public class DeleteOfflineReturnBLTest
    {

        /// <summary>
        /// delete OfflineReturn to the Collection if it is valid.
        /// </summary>
        [TestMethod]
        public async Task DeleteValidOfflineReturnBL()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = 0 };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            bool isDeleted = false;
            string errorMessage = null;

            //Act
            try
            {
                isDeleted = await offlineReturnBL.DeleteOfflineReturnBL(offlineReturn.OfflineReturnID);
            }
            catch (Exception ex)
            {
                isDeleted = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isDeleted, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturnID Should Exist
        /// </summary>
        [TestMethod]
        public async Task DeleteinValidOfflineReturnBL()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = 0 };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            bool isDeleted = false;
            string errorMessage = null;

            //Act
            try
            {
                isDeleted = await offlineReturnBL.DeleteOfflineReturnBL(default(Guid));
            }
            catch (Exception ex)
            {
                isDeleted = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isDeleted, errorMessage);
            }
        }
    }

    [TestClass]
    public class GetOfflineReturnBLTest
    {
        /// <summary>
        /// Get All OfflineReturn in the Collection if it is valid.
        /// </summary>

        [TestMethod]
        public async Task GetAllValidOfflineReturns()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = PurposeOfReturn.DefectiveProduct };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            bool isDisplayed = false;
            string errorMessage = null;

            //Act
            try
            {
                List<OfflineReturn> offlineReturnList = await offlineReturnBL.GetAllOfflineReturnsBL();
                if (offlineReturnList.Count > 0)
                {
                    isDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                isDisplayed = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isDisplayed, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturnList Can Not Ne Empty.
        /// </summary>
        /// 
        [TestMethod]
        public async Task OfflineReturnListCanNotBeEmpty()
        {
            //Arrange

            bool isDisplayed = false;
            string errorMessage = null;

            //Act
            try
            {
                OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
                List<OfflineReturn> offlineReturnList = await offlineReturnBL.GetAllOfflineReturnsBL();
                if (offlineReturnList.Count < 1)
                {
                    isDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                isDisplayed = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isDisplayed, errorMessage);
            }
        }





        /// <summary>
        /// Get All OfflineReturn in the Collection if it is valid.
        /// </summary>

        [TestMethod]
        public async Task GetOfflineReturnByOfflineReturnIDBL()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() {  QuantityOfReturn = 5, Purpose = 0 };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            bool isDisplayed = false;
            string errorMessage = null;

            //Act
            try
            {
                OfflineReturn offlineReturn1 = await offlineReturnBL.GetOfflineReturnByOfflineReturnIDBL(offlineReturn.OfflineReturnID);
                if (offlineReturn.OfflineReturnID == offlineReturn1.OfflineReturnID)

                {
                    isDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                isDisplayed = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isDisplayed, errorMessage);
            }
        }

        /// <summary>
        /// OfflineReturnID should Exist
        /// </summary>
        [TestMethod]
        public async Task OfflineReturnIDDoesNotExist()
        {
            //Arrange
            OfflineReturnBL offlineReturnBL = new OfflineReturnBL();
            OfflineReturn offlineReturn = new OfflineReturn() { QuantityOfReturn = 5, Purpose = 0 };
            await offlineReturnBL.AddOfflineReturnBL(offlineReturn);
            bool isDisplayed = false;
            string errorMessage = null;

            //Act
            try
            {
                OfflineReturn offlineReturn1 = await offlineReturnBL.GetOfflineReturnByOfflineReturnIDBL(default(Guid));
            }
            catch (Exception ex)
            {
                isDisplayed = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isDisplayed, errorMessage);
            }
        }



            }

}
